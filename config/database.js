const mongoose = require('mongoose');

const MONGODB_URI = 'mongodb+srv://mrfilthyvv:SUJlDOMr4qP2zOIm@underdb.oyw0ym2.mongodb.net/battlestats?retryWrites=true&w=majority&appName=underDB';

const MAX_RETRIES = 5;
const RETRY_DELAY = 5000;

const connectDB = async (retryCount = 0) => {
  const options = {
    connectTimeoutMS: 10000,
    socketTimeoutMS: 45000,
    serverSelectionTimeoutMS: 5000,

    maxPoolSize: 10,
    minPoolSize: 2,
    maxIdleTimeMS: 30000,

    bufferCommands: false,
    retryWrites: true,
    retryReads: true
  };

  try {
    await mongoose.connect(MONGODB_URI, options);
    console.log(`‚úÖ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: ${mongoose.connection.host}`);

    if (retryCount > 0) {
      console.log(`–£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø—ñ—Å–ª—è ${retryCount} —Å–ø—Ä–æ–±`);
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB (—Å–ø—Ä–æ–±–∞ ${retryCount + 1}/${MAX_RETRIES}):`, error.message);

    if (retryCount < MAX_RETRIES - 1) {
      const delay = RETRY_DELAY * Math.pow(2, retryCount);
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${delay}ms...`);

      await new Promise(resolve => setTimeout(resolve, delay));
      return connectDB(retryCount + 1);
    } else {
      console.error('üö® –í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB');
      throw error;
    }
  }
};

mongoose.connection.on('error', (err) => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è MongoDB:', err.message);
});

mongoose.connection.on('disconnected', () => {
  console.log('‚ö†Ô∏è MongoDB –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');
});

mongoose.connection.on('reconnected', () => {
  console.log('üîÑ MongoDB –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
});

mongoose.connection.on('close', () => {
  console.log('‚ùé –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MongoDB –∑–∞–∫—Ä–∏—Ç–æ');
});

process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('üîå MongoDB –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏');
    process.exit(0);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑\'—î–¥–Ω–∞–Ω–Ω—è:', err);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  try {
    await mongoose.connection.close();
    console.log('üîå MongoDB –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ SIGTERM');
    process.exit(0);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑\'—î–¥–Ω–∞–Ω–Ω—è:', err);
    process.exit(1);
  }
});

module.exports = connectDB;