const { validateKey, validateKeySocket } = require('../middleware/auth');
const battleStatsController = require('../controllers/battleStatsController');
const queue = require('../config/queue');
const metrics = require('../config/metrics');

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è io —ñ–Ω—Å—Ç–∞–Ω—Å—É
let globalIo;

// Rate limiting –¥–ª—è WebSocket
const rateLimitMap = new Map();
const RATE_LIMIT_WINDOW = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–º—ñ—Å—Ç—å 100ms
const RATE_LIMIT_MAX = 10; // 10 –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–º—ñ—Å—Ç—å 5

function checkRateLimit(socketId) {
    const now = Date.now();
    const socketData = rateLimitMap.get(socketId) || { count: 0, resetTime: now + RATE_LIMIT_WINDOW };
    
    if (now > socketData.resetTime) {
        socketData.count = 1;
        socketData.resetTime = now + RATE_LIMIT_WINDOW;
    } else {
        socketData.count++;
    }
    
    rateLimitMap.set(socketId, socketData);
    return socketData.count <= RATE_LIMIT_MAX;
}

// –ê–¥–∞–ø—Ç–µ—Ä–∏ –¥–ª—è –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∑ WebSocket
const adaptController = (handler) => async (socket, data, callback) => {
    try {
        // –ï–º—É–ª—è—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤ req —Ç–∞ res –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º
        const req = {
            params: { key: data.key, battleId: data.battleId },
            headers: { 'x-player-id': data.playerId || socket.id },
            body: data.body || data,
            socket: socket, // –ü–µ—Ä–µ–¥–∞—î–º–æ socket –≤ req –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ
        };

        let responseSent = false;
        const res = {
            status: (statusCode) => ({
                json: (payload) => {
                    if (!responseSent) {
                        responseSent = true;
                        if (typeof callback === 'function') {
                            callback({
                                status: statusCode,
                                body: payload,
                            });
                        }
                    }
                },
            }),
        };
        
        await handler(req, res);

    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∞ WebSocket:`, error);
        if (typeof callback === 'function') {
            callback({
                status: 500,
                body: { error: 'Internal Server Error', message: error.message },
            });
        }
    }
};

function initializeWebSocket(io) {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ io —ñ–Ω—Å—Ç–∞–Ω—Å –≥–ª–æ–±–∞–ª—å–Ω–æ
    globalIo = io;
    
    // –ü–µ—Ä–µ–¥–∞—î–º–æ io —ñ–Ω—Å—Ç–∞–Ω—Å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
    battleStatsController.setIo(io);
    
    io.on('connection', (socket) => {
        console.log(`üîå –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
        console.log(`üåê –í—Å—å–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${io.engine.clientsCount}`);
        console.log(`üì° Transport: ${socket.conn.transport.name}`);

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤—Å—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–∞ WebSocket –ø–æ–¥—ñ—ó
        socket.on('updateStats', (data, callback) => {
            console.log(`ÔøΩ –û–¢–†–ò–ú–ê–ù–û updateStats –≤—ñ–¥ ${socket.id}:`, data?.key);
            console.log(`üìã –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:`, JSON.stringify(data, null, 2));
            console.log(`‚è∞ –ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: ${new Date().toISOString()}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting
            if (!checkRateLimit(socket.id)) {
                console.log(`‚ö†Ô∏è Rate limit exceeded for ${socket.id}`);
                return callback?.({ 
                    status: 429, 
                    body: { error: 'Too Many Requests', message: '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤' } 
                });
            }
            
            if (!data?.key || !validateKeySocket(data.key)) {
                console.log(`‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–ª—é—á: ${data?.key}`);
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            
            console.log(`‚úÖ –ü–µ—Ä–µ–¥–∞—é updateStats –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è –∫–ª—é—á–∞: ${data.key}`);
            adaptController(battleStatsController.updateStats)(socket, data, callback);
        });

        socket.on('getStats', (data, callback) => {
            console.log(`üìä getStats –≤—ñ–¥ ${socket.id}:`, data?.key);
            if (!data?.key || !validateKeySocket(data.key)) {
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            
            console.log(`üîç –í–∏–∫–æ–Ω—É—é getStats –¥–ª—è –∫–ª—é—á–∞: ${data.key}`);
            adaptController(battleStatsController.getStats)(socket, data, callback);
        });

        socket.on('getOtherPlayersStats', (data, callback) => {
            console.log(`üë• getOtherPlayersStats –≤—ñ–¥ ${socket.id}:`, data?.key);
            if (!data?.key || !validateKeySocket(data.key)) {
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            adaptController(battleStatsController.getOtherPlayersStats)(socket, data, callback);
        });

        socket.on('importStats', (data, callback) => {
            console.log(`üì• importStats –≤—ñ–¥ ${socket.id}:`, data?.key);
            if (!data?.key || !validateKeySocket(data.key)) {
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            adaptController(battleStatsController.importStats)(socket, data, callback);
        });

        socket.on('clearStats', (data, callback) => {
            console.log(`üßπ clearStats –≤—ñ–¥ ${socket.id}:`, data?.key);
            if (!data?.key || !validateKeySocket(data.key)) {
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            adaptController(battleStatsController.clearStats)(socket, data, callback);
        });

        socket.on('deleteBattle', (data, callback) => {
            console.log(`üóëÔ∏è deleteBattle –≤—ñ–¥ ${socket.id}:`, data?.key);
            if (!data?.key || !validateKeySocket(data.key)) {
                return callback?.({ status: 403, body: { error: 'Forbidden', message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π API –∫–ª—é—á' } });
            }
            adaptController(battleStatsController.deleteBattle)(socket, data, callback);
        });

        socket.on('clearDatabase', (data, callback) => {
            console.log(`üí• clearDatabase –≤—ñ–¥ ${socket.id}`);
            adaptController(battleStatsController.clearDatabase)(socket, data, callback);
        });

        socket.on('disconnect', (reason) => {
            console.log(`‚ùå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
            // –û—á–∏—â—É—î–º–æ rate limit –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            rateLimitMap.delete(socket.id);
        });

        socket.on('error', (error) => {
            console.error(`üö® –ü–æ–º–∏–ª–∫–∞ —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, error);
        });
    });

    console.log('üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è io —ñ–Ω—Å—Ç–∞–Ω—Å—É
function getIo() {
    return globalIo;
}

module.exports = { initializeWebSocket, getIo };
