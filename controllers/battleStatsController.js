const battleStatsService = require('../services/battleStatsService');
const { queue, isQueueFull } = require('../config/queue');
const metrics = require('../config/metrics');

const battleStatsController = {
    updateStats: (req, res) => {
        if (isQueueFull()) {
            return res.status(503).json({
                error: 'Service Unavailable',
                message: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ',
            });
        }

        const key = req.params.key;
        const playerId = req.headers['x-player-id'];

        if (!playerId) {
            return res.status(400).json({
                error: 'Bad Request',
                message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≥—Ä–∞–≤—Ü—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–ø–∏—Ç—É (X-Player-ID)',
            });
        }

        metrics.totalRequests++;
        res.status(202).json({
            success: true,
            message: '–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É',
            queueSize: queue.size
        });

        queue.add(async () => {
            try {
                const result = await battleStatsService.processDataAsync(key, playerId, req.body);
                if (result) {
                    metrics.successfulRequests++;
                } else {
                    metrics.failedRequests++;
                }
            } catch (error) {
                metrics.failedRequests++;
                console.error('–ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:', error);
            }
        }).catch(err => {
            metrics.failedRequests++;
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤ —á–µ—Ä–∑—ñ:', err);
        });
    },

    getStats: async (req, res) => {
        try {
            const key = req.params.key;
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 10;

            const result = await battleStatsService.getStats(key, page, limit);
            
            res.status(200).json(result);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
            res.status(500).json({
                error: 'Internal Server Error',
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö'
            });
        }
    },

    getOtherPlayersStats: async (req, res) => {
        try {
            const key = req.params.key;
            const excludePlayerId = req.headers['x-player-id'];

            if (!excludePlayerId) {
                return res.status(400).json({
                    success: false,
                    message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≥—Ä–∞–≤—Ü—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–ø–∏—Ç—É (X-Player-ID)'
                });
            }

            const result = await battleStatsService.getOtherPlayersStats(key, excludePlayerId);
            res.status(200).json(result);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤:', error);
            res.status(500).json({
                error: 'Internal Server Error',
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤'
            });
        }
    },

    importStats: async (req, res) => {
        const key = req.params.key;

        res.status(202).json({
            success: true,
            message: '–ó–∞–ø–∏—Ç –Ω–∞ —ñ–º–ø–æ—Ä—Ç –ø—Ä–∏–π–Ω—è—Ç–æ'
        });

        try {
            await battleStatsService.importStats(key, req.body);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö:', error);
        }
    },

    clearStats: async (req, res) => {
        const key = req.params.key;
        
        res.status(200).json({
            success: true,
            message: `–ó–∞–ø–∏—Ç –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—é—á–∞ ${key} –ø—Ä–∏–π–Ω—è—Ç–æ`
        });

        try {
            await battleStatsService.clearStats(key);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
        }
    },

    deleteBattle: async (req, res) => {
        const key = req.params.key;
        const battleId = req.params.battleId;

        res.status(202).json({
            success: true,
            message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—é ${battleId} –ø—Ä–∏–π–Ω—è—Ç–æ`
        });

        try {
            await battleStatsService.deleteBattle(key, battleId);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±–æ—é:', error);
        }
    },

    clearDatabase: async (req, res) => {
        try {
            const result = await battleStatsService.clearDatabase();
            res.status(200).json(result);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error);
            res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
            });
        }
    },

    setIo: (io) => {
        battleStatsService.setIo(io);
        console.log('üì° IO —ñ–Ω—Å—Ç–∞–Ω—Å –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ battleStatsController');
    }
};

module.exports = battleStatsController;