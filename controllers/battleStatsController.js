const battleStatsService = require('../services/battleStatsService');
const { queue, isQueueFull } = require('../config/queue');
const metrics = require('../config/metrics');

const battleStatsController = {
    updateStats: (req, res) => {
        console.log('üì• UPDATE-STATS –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: req.params.key,
            playerId: req.headers['x-player-id'],
            bodySize: JSON.stringify(req.body).length,
            hasBody: !!req.body,
            bodyKeys: Object.keys(req.body || {}),
            method: req.method,
            url: req.url,
            headers: {
                'content-type': req.headers['content-type'],
                'x-api-key': req.headers['x-api-key'] ? 'SET' : 'NOT SET',
                'x-player-id': req.headers['x-player-id'] ? 'SET' : 'NOT SET'
            }
        });

        if (isQueueFull()) {
            console.log('‚ùå –ß–µ—Ä–≥–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞');
            return res.status(503).json({
                error: 'Service Unavailable',
                message: '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ',
            });
        }

        const key = req.params.key;
        const playerId = req.headers['x-player-id'];

        console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:', {
            key: key,
            playerId: playerId,
            keyFromParams: req.params.key,
            playerIdFromHeaders: req.headers['x-player-id']
        });

        if (!playerId) {
            console.log('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π Player ID –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö:', req.headers);
            return res.status(400).json({
                error: 'Bad Request',
                message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≥—Ä–∞–≤—Ü—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–ø–∏—Ç—É (X-Player-ID)',
            });
        }

        metrics.totalRequests++;
        console.log('‚úÖ –ó–∞–ø–∏—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏, —Ä–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏:', queue.size);
        console.log('üìä –ü–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:', {
            totalRequests: metrics.totalRequests,
            successfulRequests: metrics.successfulRequests,
            failedRequests: metrics.failedRequests,
            queueSize: queue.size
        });
        
        res.status(202).json({
            success: true,
            message: '–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É',
            queueSize: queue.size
        });

        console.log('üîÑ –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É...');
        queue.add(async () => {
            console.log('üîÑ –ü–æ—á–∞–ª–∞—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞:', { 
                key, 
                playerId,
                timestamp: new Date().toISOString(),
                queuePending: queue.pending,
                queueSize: queue.size
            });
            try {
                const result = await battleStatsService.processDataAsync(key, playerId, req.body);
                console.log('‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', { 
                    key, 
                    playerId, 
                    result,
                    timestamp: new Date().toISOString()
                });
                if (result) {
                    metrics.successfulRequests++;
                    console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç, –æ–Ω–æ–≤–ª–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:', {
                        totalRequests: metrics.totalRequests,
                        successfulRequests: metrics.successfulRequests
                    });
                } else {
                    console.log('‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ false');
                    metrics.failedRequests++;
                    console.log('‚ö†Ô∏è –ù–µ–≤–¥–∞–ª–∏–π –∑–∞–ø–∏—Ç, –æ–Ω–æ–≤–ª–µ–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:', {
                        totalRequests: metrics.totalRequests,
                        failedRequests: metrics.failedRequests
                    });
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏:', {
                    key,
                    playerId,
                    error: error.message,
                    stack: error.stack,
                    timestamp: new Date().toISOString()
                });
                metrics.failedRequests++;
            }
        }).catch(err => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —á–µ—Ä–∑—ñ:', {
                key,
                playerId,
                error: err.message,
                stack: err.stack,
                timestamp: new Date().toISOString()
            });
            metrics.failedRequests++;
        });

        console.log('üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å 202 –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ—á–∞–ª–∞—Å—å');
    },

    getStats: async (req, res) => {
        console.log('üì§ GET-STATS –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: req.params.key,
            page: req.query.page,
            limit: req.query.limit,
            url: req.url,
            method: req.method
        });

        try {
            const key = req.params.key;
            const page = parseInt(req.query.page) || 1;
            const limit = req.query.limit !== undefined ? parseInt(req.query.limit) : 10;

            console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ GET-STATS:', { key, page, limit });

            const result = await battleStatsService.getStats(key, page, limit);
            
            console.log('‚úÖ GET-STATS —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
                key,
                success: result.success,
                hasBattleStats: !!result.BattleStats,
                hasPlayerInfo: !!result.PlayerInfo,
                battleStatsKeys: Object.keys(result.BattleStats || {}),
                playerInfoKeys: Object.keys(result.PlayerInfo || {}),
                battleStatsCount: Object.keys(result.BattleStats || {}).length,
                playerInfoCount: Object.keys(result.PlayerInfo || {}).length,
                timestamp: new Date().toISOString()
            });
            
            res.status(200).json(result);
            console.log('üì§ GET-STATS –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', {
                key: req.params.key,
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
            res.status(500).json({
                error: 'Internal Server Error',
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö'
            });
        }
    },

    getOtherPlayersStats: async (req, res) => {
        console.log('üì§ GET-OTHER-PLAYERS –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: req.params.key,
            playerId: req.headers['x-player-id']
        });

        try {
            const key = req.params.key;
            const excludePlayerId = req.headers['x-player-id'];

            if (!excludePlayerId) {
                console.log('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π Player ID –¥–ª—è GET-OTHER-PLAYERS');
                return res.status(400).json({
                    success: false,
                    message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –≥—Ä–∞–≤—Ü—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –∑–∞–ø–∏—Ç—É (X-Player-ID)'
                });
            }

            console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ GET-OTHER-PLAYERS:', { key, excludePlayerId });

            const result = await battleStatsService.getOtherPlayersStats(key, excludePlayerId);
            
            console.log('‚úÖ GET-OTHER-PLAYERS —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
                key,
                excludePlayerId,
                success: result.success,
                battleStatsCount: Object.keys(result.BattleStats || {}).length,
                timestamp: new Date().toISOString()
            });
            
            res.status(200).json(result);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤:', {
                key: req.params.key,
                excludePlayerId: req.headers['x-player-id'],
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
            res.status(500).json({
                error: 'Internal Server Error',
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤'
            });
        }
    },

    importStats: async (req, res) => {
        const key = req.params.key;

        console.log('üì• IMPORT-STATS –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: key,
            bodySize: JSON.stringify(req.body).length,
            hasBody: !!req.body,
            bodyKeys: Object.keys(req.body || {})
        });

        res.status(202).json({
            success: true,
            message: '–ó–∞–ø–∏—Ç –Ω–∞ —ñ–º–ø–æ—Ä—Ç –ø—Ä–∏–π–Ω—è—Ç–æ'
        });

        try {
            console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—é—á–∞:', key);
            await battleStatsService.importStats(key, req.body);
            console.log('‚úÖ –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞:', key);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö:', {
                key: key,
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
        }
    },

    clearStats: async (req, res) => {
        const key = req.params.key;
        
        console.log('üóëÔ∏è CLEAR-STATS –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: key
        });

        res.status(200).json({
            success: true,
            message: `–ó–∞–ø–∏—Ç –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—é—á–∞ ${key} –ø—Ä–∏–π–Ω—è—Ç–æ`
        });

        try {
            console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª—é—á–∞:', key);
            await battleStatsService.clearStats(key);
            console.log('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞:', key);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', {
                key: key,
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
        }
    },

    deleteBattle: async (req, res) => {
        const key = req.params.key;
        const battleId = req.params.battleId;

        console.log('üóëÔ∏è DELETE-BATTLE –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString(),
            key: key,
            battleId: battleId
        });

        res.status(202).json({
            success: true,
            message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—é ${battleId} –ø—Ä–∏–π–Ω—è—Ç–æ`
        });

        try {
            console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—é:', { key, battleId });
            await battleStatsService.deleteBattle(key, battleId);
            console.log('‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', { key, battleId });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –±–æ—é:', {
                key: key,
                battleId: battleId,
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
        }
    },

    clearDatabase: async (req, res) => {
        console.log('üóëÔ∏è CLEAR-DATABASE –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:', {
            timestamp: new Date().toISOString()
        });

        try {
            console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
            const result = await battleStatsService.clearDatabase();
            console.log('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);
            res.status(200).json(result);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', {
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
            res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö',
            });
        }
    },

    setIo: (io) => {
        battleStatsService.setIo(io);
        console.log('üì° IO —ñ–Ω—Å—Ç–∞–Ω—Å –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ battleStatsController');
    }
};

module.exports = battleStatsController;